// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
  // shadowDatabaseUrl
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique 
  role          UserRole  @default(OWNER)
  status        UserStatus @default(ACTIVE)
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?  @updatedAt
  accounts      Account[]
  sessions      Session[]
  restaurant    Restaurant?
  subscription  Subscription?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?    
  token_type        String? 
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
}

model Session {
  id            String  @id @default(cuid())
  sessionToken  String  @unique @map("session_token")
  userId        String  @map("user_id")
  expires       DateTime
  createdAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
}

model VerificationToken {
  identifier  String
  token       String  @unique
  expires     DateTime
  createdAt   DateTime @default(now())

  @@unique([identifier, token])
  @@map("verficationtokens")
}

model Plan {
  id          String  @id
  planType    PlanType @unique
  name        String
  description String?
  price       Float
  currency    CurrecyType
  duration    Int
  maxMenus    Int
  maxTables   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  subscription Subscription[]
  payment     Payment[]

  @@map("plans")
}

model Subscription {
  id          String  @id @default(cuid())
  userId      String  @map("user_id") @unique
  planId      String  @map("plan_id") @unique
  status      SubscriptionStatus
  currentPeriodStart DateTime @map("current_period_start")
  currentPeriodEnd DateTime @map("current_period_end")
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id], onDelete: Restrict)

  @@map("subscriptions")
}

model Restaurant {
  id          String  @id @default(cuid())
  userId      String  @map("user_id") @unique
  name        String?
  address     String?
  restAddress String? @map("rest_address")
  branch      String?
  postCode    String? @map("post_code")
  phoneNumber String? @map("phone_number") @unique
  template    Int? @default(0)
  startTime   String? @map("start_time")
  endTime     String? @map("end_time")
  holidays    Json? @default("[]")
  lastOrder   String? @map("last_order")
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  restaurantTables RestaurantTable[]
  menuItems   MenuItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("restaurants")
}

model RestaurantTable {
  id          String  @id @default(cuid())
  restaurantId String  @map("restaurant_id")
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  tableTypeAssignments TableTypeAssignment[]

  @@map("restauranttable")
  @@index([restaurantId])
}

model TableTypeAssignment {
  id                String  @id @default(cuid())
  restaurantTableId String  @map("restaurant_table_id")
  tableType         TableType @map("table_type")
  number            Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt

  tableTypeAssignment RestaurantTable @relation(fields: [restaurantTableId], references: [id], onDelete: Cascade)

  @@map("tabletypeassignment")
  @@index([restaurantTableId])
  @@unique([restaurantTableId])
}

model MenuItem {
  id          String  @id @default(cuid())
  restaurantId String  @map("restaurant_id")
  name        String?
  description String?
  price       Float?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("menuitem")
  @@index([restaurantId])
}

model Payment {
  id           String  @id @default(cuid())
  orderId      String  @map("order_id") @unique
  planId       String @map("plan_id")
  status       String
  amount       Float
  currency     CurrecyType
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt
  plan         Plan     @relation(fields: [planId], references: [id])

  @@map("payment")
  @@index([planId])
}

enum UserRole {
  ADMIN
  OWNER
  STAFF
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
  BANNED
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  EXPIRED
  PENDING
  CANCELLED
}

enum TableType {
  TABLE
  COUNTER
}

enum PlanType {
  FREE_TRIAL
  MONTHLY
  YEARLY
}

enum CurrecyType {
  USD
  JPY
}