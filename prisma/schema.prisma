// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
  // shadowDatabaseUrl
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique 
  role          UserRole  @default(OWNER)
  status        UserStatus @default(INACTIVE)
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?  @updatedAt
  accounts      Account[]
  sessions      Session[]
  restaurant    Restaurant?
  subscription  Subscription?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?    
  token_type        String? 
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
}

model Session {
  id            String  @id @default(cuid())
  sessionToken  String  @unique @map("session_token")
  userId        String  @map("user_id")
  expires       DateTime
  createdAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
}

model VerificationToken {
  identifier  String
  token       String  @unique
  expires     DateTime
  createdAt   DateTime @default(now())

  @@unique([identifier, token])
  @@map("verficationtokens")
}

model Plan {
  id          String  @id
  planType    PlanType @unique
  name        String
  description String? @db.Text
  price       Float @db.Double
  currency    CurrencyType
  duration    Int
  maxMenus    Int
  maxTables   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  subscription Subscription[]
  payment     PlanPayment[]

  @@map("plans")
}

model Subscription {
  id          String  @id @default(cuid())
  userId      String  @map("user_id") @unique
  planId      String  @map("plan_id")
  status      SubscriptionStatus
  currentPeriodStart DateTime @map("current_period_start")
  currentPeriodEnd DateTime @map("current_period_end")
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id], onDelete: Restrict)

  @@map("subscriptions")
  @@unique([userId, planId])
  @@index([planId])
}

model Restaurant {
  id          String  @id @default(cuid())
  userId      String  @map("user_id") @unique
  name        String?
  address     String?
  restAddress String? @map("rest_address")
  branch      String?
  postCode    String? @map("post_code")
  phoneNumber String? @map("phone_number") @unique
  template    Int? @default(0)
  startTime   String? @map("start_time")
  endTime     String? @map("end_time")
  holidays    Json? @default("[]")
  lastOrder   String? @map("last_order")
  logoUrl     String? @map("logo_url")
  logoVersion Int @default(0) @map("logo_version")
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  restaurantTables RestaurantTable[]
  menuCategories MenuCategory[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("restaurants")
}

model RestaurantTable {
  id           String  @id @default(cuid())
  qrCodeId     String  @unique
  restaurantId String  @map("restaurant_id")
  tableType    TableType @map("table_type")
  number       Int
  group        String? @default("")
  nickname     String?
  status       TableStatus @default(AVAILABLE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt
  orders       Order[]

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("restauranttables")
  @@index([id])
  @@index([restaurantId, qrCodeId])
  @@unique([restaurantId, tableType, number])
}

// DEPRECATED: Integrate with RestaurantTable model
model TableTypeAssignment {
  id                String  @id @default(cuid())
  restaurantTableId String  @map("restaurant_table_id")
  tableType         TableType @map("table_type")
  number            Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime? @updatedAt

  // restaurantTable RestaurantTable @relation(fields: [restaurantTableId], references: [id], onDelete: Cascade)

  @@map("tabletypeassignment")
  // @@index([restaurantTableId])
  // @@unique([restaurantTableId, tableType])
}

model MenuItem {
  id            String  @id @default(cuid())
  categoryId    String  @map("category_id")
  subCategoryId String? @map("sub_category_id")
  name          String
  description   String? @db.Text
  price         Float  @db.Double
  imageUrl      String? @map("image_url")
  imageVersion  Int @default(0) @map("image_version") @db.SmallInt
  displayOrder  Int @default(0) @map("display_order") @db.TinyInt
  maxDailyOrders Int? @map("max_daily_orders") @db.SmallInt
  status        MenuItemStatus @default(AVAILABLE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt
  orderItems    OrderItem[]
  menuItemOptions MenuItemOption[]

  category    MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategory MenuSubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  @@map("menuitems")
  @@index([categoryId])
  @@index([subCategoryId])
}

model MenuSubCategory {
  id           String   @id @default(cuid())
  categoryId   String   @map("category_id")
  name         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt
  menuItems    MenuItem[]

  category    MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("menusubcategories")
  @@index([categoryId])
}

model MenuCategory {
  id            String  @id @default(cuid())
  restaurantId  String  @map("restaurant_id")
  name          String
  description   String? @db.Text
  imageUrl      String? @map("image_url")
  imageVersion  Int @default(0) @map("image_version") @db.SmallInt
  displayOrder  Int @default(0) @map("display_order")
  status        MenuCategoryStatus @default(AVAILABLE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  subCategories MenuSubCategory[]
  menuItems     MenuItem[]
  defaultOptions MenuCategoryOption[]

  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  @@map("menucategories")
  @@index([restaurantId])
}

model MenuCategoryOption {
  id               String @id @default(cuid())
  categoryId       String @map("category_id")
  name             String
  price            Float @db.Double
  description      String? @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime? @updatedAt
  menuItemOptions  MenuItemOption[]

  category         MenuCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@map("menuoptions")
  @@index([categoryId])
}

model MenuItemOption {
  id                  String              @id @default(cuid())
  menuItemId          String
  menuCategoryOptionId String?  // Reference to MenuCategoryOption
  name                String
  description         String?
  price               Float @db.Double
  createdAt           DateTime @default(now())
  updatedAt           DateTime? @updatedAt
  orderItemOptions    OrderItemOption[]

  menuItem           MenuItem   @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  menuCategoryOption MenuCategoryOption? @relation(fields: [menuCategoryOptionId], references: [id], onDelete: SetNull)

  @@map("menuitemoptions")
  @@index([menuItemId])
  @@index([menuCategoryOptionId])
}

model PlanPayment {
  id           String  @id @default(cuid())
  planOrderId  String  @map("plan_order_id") @unique
  planId       String @map("plan_id")
  status       String
  amount       Float
  currency     CurrencyType
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt
  plan         Plan     @relation(fields: [planId], references: [id])

  @@map("planpayments")
  @@index([planId])
}

model Order {
  id               String   @id @default(cuid())
  tableId          String   @map("table_id")
  status           OrderStatus
  orderNumber      Int     @map("order_number") @default(autoincrement())
  customerName     String?  @map("customer_name")
  createdAt        DateTime @default(now())
  updatedAt        DateTime? @updatedAt
  orderRequests    OrderRequest[]
  orderPayment     OrderPayment?

  table            RestaurantTable @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@map("orders")
  @@index([tableId])
  @@index([orderNumber])
}

model OrderRequest {
  id          String   @id @default(cuid())
  orderId     String   @map("order_id")
  status      OrderRequestStatus @default(PLACED)
  orderRequestNumber Int @map("order_request_number") @default(autoincrement())
  rejectedReason String? @map("rejected_reason")
  rejectedReasonDisplay Boolean @map("rejected_reason_display") @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  orderItems  OrderItem[]

  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("orderrequests")
  @@index([orderId])
  @@index([orderRequestNumber])
}

model OrderItem {
  id               String  @id @default(cuid())
  orderRequestId   String  @map("order_request_id")
  menuItemId       String? @map("menu_item_id")
  quantity         Int
  name             String
  price            Float @db.Double
  createdAt        DateTime @default(now())
  updatedAt        DateTime? @updatedAt
  selectedOptions  OrderItemOption[]

  orderRequest     OrderRequest @relation(fields: [orderRequestId], references: [id], onDelete: Cascade)
  menuItem         MenuItem? @relation(fields: [menuItemId], references: [id], onDelete: SetNull)

  @@map("orderitems")
  @@index([menuItemId])
  @@index([orderRequestId])
}

model OrderItemOption {
  id               String  @id @default(cuid())
  orderItemId      String @map("order_item_id")
  menuItemOptionId String? @map("menu_item_option_id")
  name             String
  price            Float @db.Double
  createdAt        DateTime @default(now())
  updatedAt        DateTime? @updatedAt

  orderItem       OrderItem  @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  menuItemOption  MenuItemOption? @relation(fields: [menuItemOptionId], references: [id], onDelete: SetNull)

  @@map("orderitemoptions")
  @@index([orderItemId])
  @@index([menuItemOptionId])
}

model OrderPayment {
  id           String   @id @default(cuid())
  orderId      String   @map("order_id") @unique
  paymentType  PaymentType
  totalAmount  Float
  currency     CurrencyType
  createdAt    DateTime @default(now())
  updatedAt    DateTime? @updatedAt

  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_payments")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  message     String
  startTime   DateTime
  endTime     DateTime
  status      AnnouncementStatus @default(ACTIVE)
  audience    AudienceType
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  @@map("announcements")
}

enum UserRole {
  ADMIN
  OWNER
  STAFF
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
  BANNED
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  EXPIRED
  PENDING
  CANCELLED
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  UNAVAILABLE
}

enum OrderStatus {
  PENDING
  ORDERED
  PAYMENT_REQUESTED
  CANCELLED
  COMPLETED
}

enum OrderRequestStatus {
  PLACED
  ACCEPTED
  CANCELLED
  COMPLETED
}

enum MenuCategoryStatus {
  AVAILABLE
  UNAVAILABLE
  ARCHIVED
  SOLD_OUT
  COMING_SOON
}

enum MenuItemStatus {
  AVAILABLE
  UNAVAILABLE
  ARCHIVED
  LIMITED
  SOLD_OUT
  COMING_SOON
}

enum TableType {
  TABLE
  COUNTER
}

enum PlanType {
  FREE_TRIAL
  MONTHLY
  YEARLY
}

enum PaymentType {
  CASH
  CREDIT_CARD
  PAYPAY
  LINEPAY
}

enum CurrencyType {
  USD
  JPY
}

enum AnnouncementStatus {
  ACTIVE
  INACTIVE
}

enum AudienceType {
  USERS
  OWNERS
  BOTH
}