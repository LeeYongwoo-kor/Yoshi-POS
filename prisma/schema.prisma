// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
  // shadowDatabaseUrl
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique 
  role          Int?      
  emailVerified DateTime? @map("email_verified")
  phone         Int?      @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?  @updatedAt
  accounts      Account[]
  sessions      Session[]
  restaurant    Restaurant?
  subscription  Subscription?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?    
  token_type        String? 
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
}

model Session {
  id            String  @id @default(cuid())
  sessionToken  String  @unique @map("session_token")
  userId        String  @map("user_id")
  expires       DateTime
  createdAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
}

model VerificationToken {
  identifier  String
  token       String  @unique
  expires     DateTime
  createdAt   DateTime @default(now())

  @@unique([identifier, token])
  @@map("verficationtokens")
}

model Plan {
  id          Int  @id @default(autoincrement())
  name        String
  description String?
  price       Float
  currency    String
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  subscription Subscription?

  @@map("plans")
}

model Subscription {
  id          String  @id @default(cuid())
  userId      String  @map("user_id") @unique
  planId      Int  @map("plan_id") @unique
  status      Int
  currentPeriodStart DateTime @map("current_period_start")
  currentPeriodEnd DateTime @map("current_period_end")
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id], onDelete: Restrict)

  @@map("subscriptions")
}

model Restaurant {
  id          String  @id @default(cuid())
  userId      String  @map("user_id") @unique
  name        String?
  address     String?
  template    Int? @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  restaurantTables RestaurantTable[]
  menuItems   MenuItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("restaurants")
}

model RestaurantTable {
  id          String  @id @default(cuid())
  restaurantId String  @map("restaurant_id") @unique
  tableNumber  Int? @default(1) @map("table_number")
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("restauranttable")
  @@index([restaurantId])
}

model MenuItem {
  id          String  @id @default(cuid())
  restaurantId String  @map("restaurant_id") @unique
  name        String?
  description String?
  price       Float?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("menuitem")
  @@index([restaurantId])
}