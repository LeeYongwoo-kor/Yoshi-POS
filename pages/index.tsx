import { useError } from "@/context/error-context";
import { GetServerSidePropsContext } from "next";
import { getServerSession } from "next-auth";
import { signIn } from "next-auth/react";
import Head from "next/head";
import { useForm } from "react-hook-form";
import { authOptions } from "./api/auth/[...nextauth]";

interface IEmail {
  email: string;
}

export default function Home() {
  const { error } = useError();
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<IEmail>();
  const onValid = ({ email }: IEmail) =>
    signIn("email", { email, callbackUrl: "/dashboard" });

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex items-center justify-center w-full h-screen bg-slate-300">
        <div className="flex items-center justify-center bg-white w-144 h-144">
          <div className="space-y-3">
            <form onSubmit={handleSubmit(onValid)}>
              <div>
                <input
                  {...register("email", {
                    required: "Write your email please",
                    pattern: {
                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,
                      message: "Invalid email address",
                    },
                  })}
                  type="email"
                  placeholder="Please input email address"
                  className="border border-blue-500"
                />
                <button className="bg-orange-400">Email Login</button>
                {errors.email && (
                  <p className="text-red-600">{errors.email.message}</p>
                )}
                {error === "email-already-in-use" && (
                  <p className="text-red-600">
                    Error: The email is already in use. Please use a different
                    email.
                  </p>
                )}
              </div>
            </form>
            <div className="text-center bg-slate-400">
              <button
                onClick={() => signIn("google", { callbackUrl: "/dashboard" })}
              >
                Google in
              </button>
            </div>
            <div className="text-center bg-slate-400">
              <button
                onClick={() => signIn("line", { callbackUrl: "/dashboard" })}
              >
                Line in
              </button>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (session) {
    return {
      redirect: {
        destination: "/dashboard",
      },
    };
  }

  return {
    props: {},
  };
}
